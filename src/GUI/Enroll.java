/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import com.Futronic.ScanApiEx.MainForm;
import fingerprintidhostel.more;
import com.Futronic.ScanApiHelper.Scanner;
import java.awt.image.*;
import com.innovatrics.idkit.IDKitException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;

/**
 *
 * @author Yepson
 */
public class Enroll extends javax.swing.JFrame {
public static byte[] m_pImage;
public static byte[] m_pImage1;
public static byte[] m_pImage2;
private Scanner m_devScan;
public    int nWidth, nHeight;
    /**
     * Creates new form Enroll
     */
    public Enroll() {
        initComponents();
        setLocationRelativeTo( null );
        m_devScan = new Scanner();
        m_FingerPrintImage = new MyIcon1();
        m_FingerPrintImage1 = new MyIcon1();
        m_FingerPrintImage2 = new  MyIcon1();
        
        FingerImage.setIcon( m_FingerPrintImage );
        FingerImage.setIcon( m_FingerPrintImage1);
        FingerImage.setIcon( m_FingerPrintImage2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ref_enroll = new javax.swing.JTextField();
        E_name = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnGetFrame = new javax.swing.JButton();
        chkLFD = new javax.swing.JCheckBox();
        chkInvertImage = new javax.swing.JCheckBox();
        btnGetFrame1 = new javax.swing.JButton();
        btnGetFrame2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        e_ref = new javax.swing.JLabel();
        e_room = new javax.swing.JLabel();
        e_hostel = new javax.swing.JLabel();
        FingerImage = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        lblMessage = new javax.swing.JLabel();
        but_enroll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 3, 10)); // NOI18N
        jLabel1.setText("Enter Reference Number");

        ref_enroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ref_enrollActionPerformed(evt);
            }
        });

        E_name.setFont(new java.awt.Font("Perpetua Titling MT", 2, 24)); // NOI18N

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnGetFrame.setText("Finger1");
        btnGetFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetFrameActionPerformed(evt);
            }
        });
        jPanel1.add(btnGetFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 40, 40));

        chkLFD.setText("Live Finger Detection (LFD)");
        chkLFD.setActionCommand("chkLFD");
        chkLFD.setName("chkLFD"); // NOI18N
        jPanel1.add(chkLFD, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 360, 115, -1));

        chkInvertImage.setText("Invert Image");
        jPanel1.add(chkInvertImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 113, -1));

        btnGetFrame1.setText("Finger2");
        btnGetFrame1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetFrame1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnGetFrame1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 40, 40));

        btnGetFrame2.setText("Finger3");
        btnGetFrame2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetFrame2ActionPerformed(evt);
            }
        });
        jPanel1.add(btnGetFrame2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 40, 40));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 330, 86, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fingerprint.jpg"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 340, 350));

        e_ref.setFont(new java.awt.Font("Perpetua Titling MT", 2, 24)); // NOI18N

        e_room.setFont(new java.awt.Font("Perpetua Titling MT", 2, 24)); // NOI18N

        e_hostel.setFont(new java.awt.Font("Perpetua Titling MT", 2, 24)); // NOI18N

        FingerImage.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtInfo.setColumns(20);
        txtInfo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtInfo.setRows(2);
        txtInfo.setAutoscrolls(false);
        jScrollPane3.setViewportView(txtInfo);

        lblMessage.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        but_enroll.setText("Enroll");
        but_enroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_enrollActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FingerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_enroll, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ref_enroll, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(94, 94, 94)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(E_name, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(e_ref, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(e_hostel, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(e_room, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(E_name, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(e_ref, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ref_enroll, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(e_hostel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(e_room, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(FingerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(but_enroll, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ref_enrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ref_enrollActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ref_enrollActionPerformed

    private void but_enrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_enrollActionPerformed
        // TODO add your handling code here:
        more m = new more();
        
       try {
            m.idfromimage(nWidth, nHeight, m_pImage, m_pImage1, m_pImage2);
        } catch (IDKitException ex) {
            Logger.getLogger(Enroll.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_but_enrollActionPerformed

    private void btnGetFrame1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetFrame1ActionPerformed
        // TODO add your handling code here:
        int option;
        String strInfo;

        btnGetFrame1.setEnabled(false);
        lblMessage.setText("");

        if( !m_devScan.OpenDevice() )
        {
            lblMessage.setText("Device is not connected!");
            btnGetFrame1.setEnabled(true);
            return;
        }
        strInfo = m_devScan.GetVersionInfo();
        if( strInfo == null)
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            btnGetFrame1.setEnabled(true);
            return;
        }
        else
        {
            txtInfo.setText(strInfo);
        }
        if( !m_devScan.GetImageSize() )
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame1.setEnabled(true);
            return;
        }
        nWidth = m_devScan.GetImageWidth();
        nHeight = m_devScan.GetImaegHeight();

        if(chkLFD.isSelected())
        option = m_devScan.FTR_OPTIONS_CHECK_FAKE_REPLICA;
        else
        option = 0;
        if( !m_devScan.SetOptions(m_devScan.FTR_OPTIONS_CHECK_FAKE_REPLICA, option ))
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame1.setEnabled(true);
            return;
        }
        if( chkInvertImage.isSelected())
        option = m_devScan.FTR_OPTIONS_INVERT_IMAGE;
        else
        option = 0;
        if( !m_devScan.SetOptions(m_devScan.FTR_OPTIONS_INVERT_IMAGE, option))
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame1.setEnabled(true);
            return;
        }
        //allocate the buffer befoer call GetFrame

        m_pImage1 = new byte[nWidth*nHeight];
        if( m_devScan.GetImage2(4,m_pImage1) )
        {
        } else {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame1.setEnabled(true);
            return;
        }

        m_devScan.CloseDevice();

        if( m_pImage1 != null )
        {
            m_hImage1 = new BufferedImage( nWidth,
                nHeight,
                BufferedImage.TYPE_BYTE_GRAY );
            DataBuffer db1 = m_hImage1.getRaster().getDataBuffer();
            for( int i = 0; i < db1.getSize(); i++ )
            {
                db1.setElem( i, m_pImage1[i] );
            }
            m_FingerPrintImage1.setImage( m_hImage1 );
            FingerImage.repaint();
        }
        btnGetFrame1.setEnabled(true);
        btnGetFrame2.setBackground(Color.GREEN);
    }//GEN-LAST:event_btnGetFrame1ActionPerformed

    private void btnGetFrame2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetFrame2ActionPerformed
        // TODO add your handling code here:
        int option;
        String strInfo;

        btnGetFrame2.setEnabled(false);
        lblMessage.setText("");

        if( !m_devScan.OpenDevice() )
        {
            lblMessage.setText("Device is not connected!");
            btnGetFrame2.setEnabled(true);
            return;
        }
        strInfo = m_devScan.GetVersionInfo();
        if( strInfo == null)
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            btnGetFrame2.setEnabled(true);
            return;
        }
        else
        {
            txtInfo.setText(strInfo);
        }
        if( !m_devScan.GetImageSize() )
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame2.setEnabled(true);
            return;
        }
        nWidth = m_devScan.GetImageWidth();
        nHeight = m_devScan.GetImaegHeight();

        if(chkLFD.isSelected())
        option = m_devScan.FTR_OPTIONS_CHECK_FAKE_REPLICA;
        else
        option = 0;
        if( !m_devScan.SetOptions(m_devScan.FTR_OPTIONS_CHECK_FAKE_REPLICA, option ))
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame2.setEnabled(true);
            return;
        }
        if( chkInvertImage.isSelected())
        option = m_devScan.FTR_OPTIONS_INVERT_IMAGE;
        else
        option = 0;
        if( !m_devScan.SetOptions(m_devScan.FTR_OPTIONS_INVERT_IMAGE, option))
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame2.setEnabled(true);
            return;
        }
        //allocate the buffer befoer call GetFrame

        m_pImage2 = new byte[nWidth*nHeight];
        if( m_devScan.GetImage2(4,m_pImage2) )
        {
        } else {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame2.setEnabled(true);
            return;
        }

        m_devScan.CloseDevice();

        if( m_pImage2 != null )
        {
            m_hImage2 = new BufferedImage( nWidth,
                nHeight,
                BufferedImage.TYPE_BYTE_GRAY );
            DataBuffer db1 = m_hImage2.getRaster().getDataBuffer();
            for( int i = 0; i < db1.getSize(); i++ )
            {
                db1.setElem( i, m_pImage2[i] );
            }
            m_FingerPrintImage2.setImage( m_hImage2 );
            FingerImage.repaint();
        }
        btnGetFrame2.setEnabled(true);
    }//GEN-LAST:event_btnGetFrame2ActionPerformed

    private void btnGetFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetFrameActionPerformed
        //  int nWidth, nHeight;
        int option;
        String strInfo;

        btnGetFrame.setEnabled(false);
        lblMessage.setText("");

        if( !m_devScan.OpenDevice() )
        {
            lblMessage.setText("Device is not connected!");
            btnGetFrame.setEnabled(true);
            return;
        }
        strInfo = m_devScan.GetVersionInfo();
        if( strInfo == null)
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            btnGetFrame.setEnabled(true);
            return;
        }
        else
        {
            txtInfo.setText(strInfo);
        }
        if( !m_devScan.GetImageSize() )
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame.setEnabled(true);
            return;
        }
        nWidth = m_devScan.GetImageWidth();
        nHeight = m_devScan.GetImaegHeight();

        if(chkLFD.isSelected())
        option = m_devScan.FTR_OPTIONS_CHECK_FAKE_REPLICA;
        else
        option = 0;
        if( !m_devScan.SetOptions(m_devScan.FTR_OPTIONS_CHECK_FAKE_REPLICA, option ))
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame.setEnabled(true);
            return;
        }
        if( chkInvertImage.isSelected())
        option = m_devScan.FTR_OPTIONS_INVERT_IMAGE;
        else
        option = 0;
        if( !m_devScan.SetOptions(m_devScan.FTR_OPTIONS_INVERT_IMAGE, option))
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame.setEnabled(true);
            return;
        }
        //allocate the buffer befoer call GetFrame

        m_pImage = new byte[nWidth*nHeight];
        if( m_devScan.GetImage2(4,m_pImage) )
        {
        } else {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame.setEnabled(true);
            return;
        }

        m_devScan.CloseDevice();

        if( m_pImage != null )
        {
            m_hImage = new BufferedImage( nWidth,
                nHeight,
                BufferedImage.TYPE_BYTE_GRAY );
            DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
            for( int i = 0; i < db1.getSize(); i++ )
            {
                db1.setElem( i, m_pImage[i] );
            }

            m_FingerPrintImage.setImage( m_hImage );
            FingerImage.repaint();
        }
        btnGetFrame.setEnabled(true);
        btnGetFrame1.setBackground(Color.GREEN);
    }//GEN-LAST:event_btnGetFrameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        E_name.setText("");
        e_hostel.setText("");
        e_ref.setText("");
        e_room.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**FingerImage.setIcon( m_FingerPrintImage );
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Enroll.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Enroll.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Enroll.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Enroll.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Enroll().setVisible(true);
            }
        });
    }
    
    class MyIcon1 implements  Icon
    {
        public MyIcon1()
        {
            m_Image = null;
        }

        public void paintIcon(Component c, Graphics g, int x, int y)
        {
            if( m_Image != null )
                g.drawImage( m_Image, x, y, getIconWidth(), getIconHeight(), null );
            else
                g.fillRect( x, y, getIconWidth(), getIconHeight() );
        }

        public int getIconWidth()
        {
            return 240;
        }

        public int getIconHeight()
        {
            return 240;
        }

        public boolean LoadImage( String path )
        {
            boolean bRetCode = false;
            Image newImg;
            try
            {
                File f = new File( path );
                newImg = ImageIO.read( f );
                bRetCode = true;
                setImage( newImg );
            }
            catch( IOException e )
            {
            }

            return bRetCode;
        }

        public void setImage( Image Img )
        {
            if( Img != null )
                m_Image = Img.getScaledInstance( getIconWidth(), getIconHeight(), Image.SCALE_FAST);
            else
                m_Image = null;
        }

        private Image m_Image;
    }
    private MyIcon1  m_FingerPrintImage;
    private MyIcon1  m_FingerPrintImage1;
    private MyIcon1  m_FingerPrintImage2;
    private BufferedImage m_hImage;
    private BufferedImage m_hImage1;
    private BufferedImage m_hImage2;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel E_name;
    private javax.swing.JLabel FingerImage;
    private javax.swing.JButton btnGetFrame;
    private javax.swing.JButton btnGetFrame1;
    private javax.swing.JButton btnGetFrame2;
    private javax.swing.JButton but_enroll;
    private javax.swing.JCheckBox chkInvertImage;
    private javax.swing.JCheckBox chkLFD;
    public static javax.swing.JLabel e_hostel;
    public static javax.swing.JLabel e_ref;
    public static javax.swing.JLabel e_room;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblMessage;
    public static javax.swing.JTextField ref_enroll;
    private javax.swing.JTextArea txtInfo;
    // End of variables declaration//GEN-END:variables
   
    String filename,filename1;

}

